import { NextRequest, NextResponse } from 'next/server';
import { VertexAI } from '@google-cloud/vertexai';
import { Event } from '@/types/event';

// Initialize Vertex AI
const vertexAI = new VertexAI({
  project: process.env.GOOGLE_CLOUD_PROJECT_ID || 'persian-community-464405',
  location: 'us-central1',
});

const model = vertexAI.getGenerativeModel({ model: 'gemini-1.5-pro' });

export async function POST(request: NextRequest) {
  try {
    const { userInput, section, previousEvents, imageText } = await request.json();

    const prompt = `
You are an AI event generator. 
Generate a JSON object that matches this Event type exactly:

Event = {
  title: string;
  description: string;
  date: string; // ISO date string (e.g., "2025-10-15")
  time: string; // 24-hour format (e.g., "14:30")
  location: string;
  category: string;
  address: string;
  coordinates?: { lat?: number; lng?: number };
  bannerUrls?: { url: string; publicId?: string };
  sponsors?: { id: string; name: string }[];
  ownerImageUrl?: string;
  organizers?: { id?: string; name: string; contact: string; imageUrl?: string }[];
  tags?: string[];
  isPublic?: boolean;
  isOnline?: boolean;
  days?: EventDay[];
  isFeatured?: boolean;
  eventLayoutUrl?: string;
  eventConfig?: {
    scheduleConfig?: { isEnabled?: boolean };
    contactConfig?: { isEnabled?: boolean };
    organizersConfig?: { isEnabled?: boolean };
    sponsorsConfig?: { isEnabled?: boolean };
    layoutConfig?: { isEnabled?: boolean };
    tagsConfig?: { isEnabled?: boolean };
    ticketsConfig?: { isEnabled?: boolean };
  };
};

EventDay = {
  date: string; // ISO date string (e.g., "2025-10-15")
  blocks: EventBlock[];
};

EventBlock = {
  start: string; // 24-hour format (e.g., "14:30")
  end: string; // 24-hour format (e.g., "15:30")
  title: string;
  description?: string;
  activities: string[];
  iconName?: string;
};

User input (may be partial):
${JSON.stringify(userInput)}

Previous events for context (use to ensure similarity):
${JSON.stringify(previousEvents?.map((event: Partial<Event>) => ({
  title: event.title,
  description: event.description,
  tags: event.tags,
  category: event.category,
  location: event.location,
  days: event.days,
})) || [])}

Image-derived text (if any):
${imageText || ''}

Focused section: ${section}

Instructions:
- Generate a JSON object that strictly conforms to the Event type above.
- If section is 'all', generate a complete event with reasonable defaults for all fields.
- If a specific section is provided, prioritize generating or enhancing that field based on user input, while filling in coherent defaults for other fields.
- Use user input, previous events, and image-derived text as context to ensure coherence (e.g., if previous events are hiking-related, generate a similar outdoor event).
- For date, provide an ISO date string (e.g., "2025-10-15"). For time, provide a 24-hour format string (e.g., "10:00").
- If user input or previous events include a combined datetime (e.g., "2022-02-20T10:00:00Z"), split it into date and time fields.
- For coordinates, provide realistic latitude/longitude values for a plausible location if not provided.
- Ensure days include at least one EventDay with one EventBlock if not provided.
- For optional fields like bannerUrls, ownerImageUrl, etc., include them only if relevant to the section or user input.
- If imageText is provided, use it to influence the event's theme or details (e.g., text from a poster might suggest a specific event type).
- Do not include fields like duration, organizer, capacity, price, or requirements unless explicitly part of the Event type.
- Return only valid JSON.
`;

    const result = await model.generateContent(prompt);
    const text = result.response.candidates?.[0]?.content?.parts?.[0]?.text || '{}';

    if (!text) {
      throw new Error('No text content returned from Vertex AI');
    }

    // Parse JSON response
    let parsed;
    try {
      parsed = JSON.parse(text);
    } catch (parseError) {
      console.error('Failed to parse Vertex AI output:', text);
      // Return default event
      return NextResponse.json({
        title: userInput.title || 'Generated Event',
        description: userInput.description || 'An exciting event generated by Vertex AI.',
        date: userInput.date || new Date().toISOString().split('T')[0],
        time: userInput.time || '12:00',
        location: userInput.location || 'Downtown Event Center',
        category: userInput.category || 'General',
        address: userInput.address || '123 Main St, City, Country',
        coordinates: userInput.coordinates || { lat: 40.7128, lng: -74.0060 },
        tags: userInput.tags || [],
        isPublic: userInput.isPublic ?? true,
        isOnline: userInput.isOnline ?? false,
        days: userInput.days || [
          {
            date: new Date().toISOString().split('T')[0],
            blocks: [
              {
                start: '12:00',
                end: '13:00',
                title: 'Welcome Session',
                activities: ['Introduction', 'Overview'],
              },
            ],
          },
        ],
        isFeatured: userInput.isFeatured ?? false,
        eventConfig: userInput.eventConfig || {
          scheduleConfig: { isEnabled: true },
          contactConfig: { isEnabled: true },
          organizersConfig: { isEnabled: true },
          sponsorsConfig: { isEnabled: true },
          layoutConfig: { isEnabled: true },
          tagsConfig: { isEnabled: true },
          ticketsConfig: { isEnabled: true },
        },
      });
    }

    // Transform combined datetime if present
    let { date, time } = parsed;
    if (date && typeof date === 'string' && date.includes('T') && !time) {
      const dateTime = new Date(date);
      date = dateTime.toISOString().split('T')[0];
      time = dateTime.toISOString().split('T')[1]?.slice(0, 5) || '12:00';
    }

    // Ensure default values for critical fields
    const vertexEvent: Omit<Event, 'id' | 'clientId'> = {
      title: parsed.title || userInput.title || 'Generated Event',
      description: parsed.description || userInput.description || 'An exciting event generated by Vertex AI.',
      date: date || userInput.date || new Date().toISOString().split('T')[0],
      time: time || userInput.time || '12:00',
      location: parsed.location || userInput.location || 'Downtown Event Center',
      category: parsed.category || userInput.category || 'General',
      address: parsed.address || userInput.address || '123 Main St, City, Country',
      coordinates: parsed.coordinates || userInput.coordinates || { lat: 40.7128, lng: -74.0060 },
      bannerUrls: parsed.bannerUrls || userInput.bannerUrls,
      sponsors: parsed.sponsors || userInput.sponsors || [],
      ownerImageUrl: parsed.ownerImageUrl || userInput.ownerImageUrl,
      organizers: parsed.organizers || userInput.organizers || [],
      tags: parsed.tags || userInput.tags || [],
      isPublic: parsed.isPublic ?? userInput.isPublic ?? true,
      isOnline: parsed.isOnline ?? userInput.isOnline ?? false,
      days: parsed.days || userInput.days || [
        {
          date: date || userInput.date || new Date().toISOString().split('T')[0],
          blocks: [
            {
              start: time || '12:00',
              end: '13:00',
              title: 'Main Session',
              activities: ['Main Activity'],
            },
          ],
        },
      ],
      isFeatured: parsed.isFeatured ?? userInput.isFeatured ?? false,
      eventLayoutUrl: parsed.eventLayoutUrl || userInput.eventLayoutUrl,
      eventConfig: parsed.eventConfig || userInput.eventConfig || {
        scheduleConfig: { isEnabled: true },
        contactConfig: { isEnabled: true },
        organizersConfig: { isEnabled: true },
        sponsorsConfig: { isEnabled: true },
        layoutConfig: { isEnabled: true },
        tagsConfig: { isEnabled: true },
        ticketsConfig: { isEnabled: true },
      },
    };

    return NextResponse.json(vertexEvent);
  } catch (error) {
    console.error('Vertex AI generation error:', error);
    return NextResponse.json(
      { error: 'Failed to generate event with Vertex AI' },
      { status: 500 }
    );
  }
}