import { NextRequest, NextResponse } from "next/server";
import { VertexAI } from "@google-cloud/vertexai";
import { Event } from "@/types/event";

// Initialize Vertex AI
const vertexAI = new VertexAI({
  project: process.env.GOOGLE_CLOUD_PROJECT_ID,
  location: "us-central1",
});

// Get a Gemini model
const model = vertexAI.getGenerativeModel({ model: "gemini-2.5-flash" });

// API handler
export async function POST(request: NextRequest) {
  try {
    const { userInput, previousEvents, imageText } = await request.json();

    const prompt = `
      You are an expert event generator. Generate a JSON object with all required fields.
      User input: ${JSON.stringify(userInput)}
      Previous events: ${JSON.stringify(previousEvents || [])}
      Image text: ${imageText || ""}
      Return only valid JSON. Fill missing fields with reasonable defaults.
    `;

    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: prompt }] }],
      generationConfig: {
        responseMimeType: "application/json", // ensures output is JSON
      },
    });

const rawText = result.response.candidates?.[0]?.content?.parts?.[0]?.text?.trim();
    if (!rawText) return NextResponse.json({ error: "Empty response" }, { status: 500 });

    let parsed: any;
    try {
      parsed = JSON.parse(rawText);
    } catch {
      console.error("Vertex AI returned invalid JSON:", rawText);
      parsed = {};
    }
console.log("Vertex AI raw response:", rawText);
    // Build final event object with defaults
    const vertexEvent: Omit<Event, "id" | "clientId"> = {
      title: parsed.title || userInput?.title || "Generated Event",
      description: parsed.description || userInput?.description || "An exciting event generated by Vertex AI",
      date: parsed.date || userInput?.date || new Date().toISOString().split("T")[0],
      time: parsed.time || userInput?.time || "12:00",
      location: parsed.location || userInput?.location || "Downtown Event Center",
      category: parsed.category || userInput?.category || "General",
      address: parsed.address || userInput?.address || "123 Main St, City",
      tags: parsed.tags || userInput?.tags || [],
      coordinates: parsed.coordinates || userInput?.coordinates || { lat: 40.7128, lng: -74.006 },
      bannerUrls: parsed.bannerUrls || userInput?.bannerUrls,
      sponsors: parsed.sponsors || userInput?.sponsors || [],
      ownerImageUrl: parsed.ownerImageUrl || userInput?.ownerImageUrl,
      organizers: parsed.organizers || userInput?.organizers || [],
      isPublic: parsed.isPublic ?? userInput?.isPublic ?? true,
      isOnline: parsed.isOnline ?? userInput?.isOnline ?? false,
      days: parsed.days || userInput?.days || [
        {
          date: parsed.date || new Date().toISOString().split("T")[0],
          blocks: [
            { start: parsed.time || "12:00", end: "13:00", title: "Main Session", activities: ["Main Activity"] },
          ],
        },
      ],
      isFeatured: parsed.isFeatured ?? userInput?.isFeatured ?? false,
      // eventLayoutUrl: parsed.eventLayoutUrl || userInput?.eventLayoutUrl,
      eventConfig: parsed.eventConfig || userInput?.eventConfig || {
        scheduleConfig: { isEnabled: true },
        contactConfig: { isEnabled: true },
        organizersConfig: { isEnabled: true },
        sponsorsConfig: { isEnabled: true },
        layoutConfig: { isEnabled: false },
        tagsConfig: { isEnabled: true },
        ticketsConfig: { isEnabled: true },
      },
    };

    return NextResponse.json(vertexEvent);
  } catch (error: any) {
    console.error("Vertex AI generation error:", error);
    return NextResponse.json({ error: "Failed to generate event" }, { status: 500 });
  }
}
