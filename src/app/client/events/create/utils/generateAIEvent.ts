import OpenAI from "openai";
import { Event, EventDay, EventBlock } from "@/types/event";

if (!process.env.OPENAI_API_KEY) throw new Error("OPENAI_API_KEY is not set");

// Initialize OpenAI client
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export async function generateAIEvent(
  userInput: Partial<Event>,
  section: keyof Event | 'all' = 'all'
): Promise<Omit<Event, "id" | "clientId">> {
  const prompt = `
You are an AI event generator. 
Generate a JSON object that matches this Event type exactly:

Event = {
  title: string;
  description: string;
  date: string; // ISO date string (e.g., "2025-10-15")
  time: string; // 24-hour format (e.g., "14:30")
  location: string;
  category: string;
  address: string;
  coordinates?: { lat?: number; lng?: number };
  bannerUrls?: { url: string; publicId?: string };
  sponsors?: { id: string; name: string }[];
  ownerImageUrl?: string;
  organizers?: { id?: string; name: string; contact: string; imageUrl?: string }[];
  tags?: string[];
  isPublic?: boolean;
  isOnline?: boolean;
  days?: EventDay[];
  isFeatured?: boolean;
  eventLayoutUrl?: string;
  eventConfig?: {
    scheduleConfig?: { isEnabled?: boolean };
    contactConfig?: { isEnabled?: boolean };
    organizersConfig?: { isEnabled?: boolean };
    sponsorsConfig?: { isEnabled?: boolean };
    layoutConfig?: { isEnabled?: boolean };
    tagsConfig?: { isEnabled?: boolean };
    ticketsConfig?: { isEnabled?: boolean };
  };
};

EventDay = {
  date: string; // ISO date string (e.g., "2025-10-15")
  blocks: EventBlock[];
};

EventBlock = {
  start: string; // 24-hour format (e.g., "14:30")
  end: string; // 24-hour format (e.g., "15:30")
  title: string;
  description?: string;
  activities: string[];
  iconName?: string;
};

User input (may be partial):
${JSON.stringify(userInput)}

Focused section: ${section}

Instructions:
- Generate a JSON object that strictly conforms to the Event type above.
- If section is 'all', generate a complete event with reasonable defaults for all fields.
- If a specific section (e.g., 'title', 'description', 'date', etc.) is provided, prioritize generating or enhancing that field based on user input, while filling in coherent defaults for other fields.
- Use existing user input as context to ensure coherence (e.g., if title is "Hiking and Omlet", generate related description, tags, etc.).
- For date, provide an ISO date string (e.g., "2025-10-15"). For time, provide a 24-hour format string (e.g., "10:00").
- For coordinates, provide realistic latitude/longitude values for a plausible location if not provided.
- Ensure days include at least one EventDay with one EventBlock if not provided.
- For optional fields like bannerUrls, ownerImageUrl, etc., include them only if relevant to the section or user input.
- If user input includes a combined datetime (e.g., "2022-02-20T10:00:00Z"), split it into date and time fields.
- Do not include fields like duration, organizer, capacity, price, or requirements unless explicitly part of the Event type.
- Return only valid JSON.
`;

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [{ role: "user", content: prompt }],
    });

    const text = response.choices[0].message?.content || "{}";

    try {
      const parsed = JSON.parse(text);
      // Transform combined datetime if present
      let { date, time } = parsed;
      if (date && date.includes('T') && !time) {
        const dateTime = new Date(date);
        date = dateTime.toISOString().split('T')[0];
        time = dateTime.toISOString().split('T')[1].slice(0, 5);
      }

      // Ensure default values for critical fields
      const result: Omit<Event, "id" | "clientId"> = {
        title: parsed.title || userInput.title || "Generated Event",
        description: parsed.description || userInput.description || "An exciting event generated by AI.",
        date: date || userInput.date || new Date().toISOString().split('T')[0],
        time: time || userInput.time || "12:00",
        location: parsed.location || userInput.location || "Downtown Event Center",
        category: parsed.category || userInput.category || "General",
        address: parsed.address || userInput.address || "123 Main St, City, Country",
        coordinates: parsed.coordinates || userInput.coordinates || { lat: 40.7128, lng: -74.0060 },
        bannerUrls: parsed.bannerUrls || userInput.bannerUrls || undefined,
        sponsors: parsed.sponsors || userInput.sponsors || [],
        ownerImageUrl: parsed.ownerImageUrl || userInput.ownerImageUrl || undefined,
        organizers: parsed.organizers || userInput.organizers || (parsed.organizer ? [{
          name: parsed.organizer.name || "Organizer",
          contact: parsed.organizer.contact || "contact@example.com",
        }] : []),
        tags: parsed.tags || userInput.tags || [],
        isPublic: parsed.isPublic ?? userInput.isPublic ?? true,
        isOnline: parsed.isOnline ?? userInput.isOnline ?? false,
        days: parsed.days || userInput.days || [
          {
            date: date || userInput.date || new Date().toISOString().split('T')[0],
            blocks: [
              {
                start: time || "12:00",
                end: ((t) => {
                  const [hours, minutes] = t.split(':').map(Number);
                  return `${(hours + 1).toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
                })(time || "12:00"),
                title: "Main Session",
                activities: parsed.requirements || ["Main Activity"],
              },
            ],
          },
        ],
        isFeatured: parsed.isFeatured ?? userInput.isFeatured ?? false,
        eventLayoutUrl: parsed.eventLayoutUrl || userInput.eventLayoutUrl || undefined,
        eventConfig: parsed.eventConfig || userInput.eventConfig || {
          scheduleConfig: { isEnabled: true },
          contactConfig: { isEnabled: true },
          organizersConfig: { isEnabled: true },
          sponsorsConfig: { isEnabled: true },
          layoutConfig: { isEnabled: true },
          tagsConfig: { isEnabled: true },
          ticketsConfig: { isEnabled: true },
        },
      };
      return result;
    } catch (parseError) {
      console.error("Failed to parse AI output:", text);
      return {
        title: userInput.title || "Generated Event",
        description: userInput.description || "An exciting event generated by AI.",
        date: userInput.date || new Date().toISOString().split('T')[0],
        time: userInput.time || "12:00",
        location: userInput.location || "Downtown Event Center",
        category: userInput.category || "General",
        address: userInput.address || "123 Main St, City, Country",
        coordinates: userInput.coordinates || { lat: 40.7128, lng: -74.0060 },
        bannerUrls: userInput.bannerUrls || undefined,
        sponsors: userInput.sponsors || [],
        ownerImageUrl: userInput.ownerImageUrl || undefined,
        organizers: userInput.organizers || [],
        tags: userInput.tags || [],
        isPublic: userInput.isPublic ?? true,
        isOnline: userInput.isOnline ?? false,
        days: userInput.days || [
          {
            date: userInput.date || new Date().toISOString().split('T')[0],
            blocks: [
              {
                start: "12:00",
                end: "13:00",
                title: "Welcome Session",
                activities: ["Introduction", "Overview"],
              },
            ],
          },
        ],
        isFeatured: userInput.isFeatured ?? false,
        eventLayoutUrl: userInput.eventLayoutUrl || undefined,
        eventConfig: userInput.eventConfig || {
          scheduleConfig: { isEnabled: true },
          contactConfig: { isEnabled: true },
          organizersConfig: { isEnabled: true },
          sponsorsConfig: { isEnabled: true },
          layoutConfig: { isEnabled: true },
          tagsConfig: { isEnabled: true },
          ticketsConfig: { isEnabled: true },
        },
      };
    }
  } catch (err: unknown) {
    console.error("OpenAI API call failed:", err);
    return {
      title: userInput.title || "Generated Event",
      description: userInput.description || "An exciting event generated by AI.",
      date: userInput.date || new Date().toISOString().split('T')[0],
      time: userInput.time || "12:00",
      location: userInput.location || "Downtown Event Center",
      category: userInput.category || "General",
      address: userInput.address || "123 Main St, City, Country",
      coordinates: userInput.coordinates || { lat: 40.7128, lng: -74.0060 },
      bannerUrls: userInput.bannerUrls || undefined,
      sponsors: userInput.sponsors || [],
      ownerImageUrl: userInput.ownerImageUrl || undefined,
      organizers: userInput.organizers || [],
      tags: userInput.tags || [],
      isPublic: userInput.isPublic ?? true,
      isOnline: userInput.isOnline ?? false,
      days: userInput.days || [
        {
          date: userInput.date || new Date().toISOString().split('T')[0],
          blocks: [
            {
              start: "12:00",
              end: "13:00",
              title: "Welcome Session",
              activities: ["Introduction", "Overview"],
            },
          ],
        },
      ],
      isFeatured: userInput.isFeatured ?? false,
      eventLayoutUrl: userInput.eventLayoutUrl || undefined,
      eventConfig: userInput.eventConfig || {
        scheduleConfig: { isEnabled: true },
        contactConfig: { isEnabled: true },
        organizersConfig: { isEnabled: true },
        sponsorsConfig: { isEnabled: true },
        layoutConfig: { isEnabled: true },
        tagsConfig: { isEnabled: true },
        ticketsConfig: { isEnabled: true },
      },
    };
  }
}